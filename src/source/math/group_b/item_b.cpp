#pragma once

#include "item_b.hpp"

namespace dla
{
    uint16_t item_b::mathval() const
    {
        return val;
    }

    item_b::item_b():
        val(0) { }

    item_b::item_b(uint8_t val):
        val(val) { }

    uint8_t item_b::getval() const
    {
        return val;
    }

    const item_b item_b::ZERO = 0_b;
    const item_b item_b::UNIT = 1_b;

    item_b item_b::operator+(item_b const& x) const
    {
        return item_b((mathval() + x.mathval()) % R);
    }

    item_b item_b::operator-(item_b const& x) const
    {
        return (*this) + (-x);
    }

    item_b item_b::operator*(item_b const& x) const
    {
        return item_b((mathval() * x.mathval()) % R);
    }

    item_b item_b::operator/(item_b const& x) const
    {
        return (*this) * (!x);
    }

    bool item_b::operator==(item_b const& x) const
    {
        return this->getval() == x.getval();
    }

    bool item_b::operator!=(item_b const& x) const
    {
        return this->getval() != x.getval();
    }

    item_b item_b::operator-() const
    {
        return item_b(R - this->val);
    }

    item_b item_b::operator!() const
    {
        static const uint8_t lookup[] =
        {
            0x00, 0x01, 0x7E, 0x54, 0x3F, 0xC9, 0x2A, 0x24,
            0x9D, 0x1C, 0xE2, 0x89, 0x15, 0x3A, 0x12, 0x43,
            0xCC, 0xC0, 0x0E, 0xB9, 0x71, 0x0C, 0xC2, 0x83,
            0x88, 0xF1, 0x1D, 0x5D, 0x09, 0x1A, 0x9F, 0x51,
            0x66, 0xD5, 0x60, 0xD0, 0x07, 0x5F, 0xDA, 0x67,
            0xB6, 0x31, 0x06, 0xD8, 0x61, 0x6A, 0xBF, 0xEB,
            0x44, 0x29, 0xF6, 0x40, 0x8C, 0x5A, 0xAC, 0xB2,
            0x82, 0xE5, 0x0D, 0xEA, 0xCD, 0x6B, 0xA6, 0x04,
            0x33, 0x70, 0xE8, 0x0F, 0x30, 0xD3, 0x68, 0x63,
            0x81, 0xC4, 0xAD, 0xA4, 0x6D, 0xA3, 0xB1, 0xC5,
            0x5B, 0x1F, 0x96, 0x7C, 0x03, 0xBD, 0x6C, 0xB0,
            0xAE, 0x6E, 0x35, 0x50, 0xDD, 0x1B, 0xF3, 0x25,
            0x22, 0x2C, 0x92, 0x47, 0x7B, 0xA9, 0x20, 0x27,
            0x46, 0x99, 0x2D, 0x3D, 0x56, 0x4C, 0x59, 0xC7,
            0x41, 0x14, 0xF0, 0xE3, 0x84, 0x76, 0x75, 0x87,
            0xE4, 0xC3, 0xB3, 0x64, 0x53, 0xF9, 0x02, 0xA8,
            0x97, 0x48, 0x38, 0x17, 0x74, 0x86, 0x85, 0x77,
            0x18, 0x0B, 0xE7, 0xBA, 0x34, 0xA2, 0xAF, 0xA5,
            0xBE, 0xCE, 0x62, 0xB5, 0xD4, 0xDB, 0x52, 0x80,
            0xB4, 0x69, 0xCF, 0xD9, 0xD6, 0x08, 0xE0, 0x1E,
            0xAB, 0xC6, 0x8D, 0x4D, 0x4B, 0x8F, 0x3E, 0xF8,
            0x7F, 0x65, 0xDC, 0xA0, 0x36, 0x4A, 0x58, 0x8E,
            0x57, 0x4E, 0x37, 0x7A, 0x98, 0x93, 0x28, 0xCB,
            0xEC, 0x13, 0x8B, 0xC8, 0xF7, 0x55, 0x90, 0x2E,
            0x11, 0xEE, 0x16, 0x79, 0x49, 0x4F, 0xA1, 0x6F,
            0xBB, 0x05, 0xD2, 0xB7, 0x10, 0x3C, 0x91, 0x9A,
            0x23, 0xF5, 0xCA, 0x45, 0x94, 0x21, 0x9C, 0xF4,
            0x2B, 0x9B, 0x26, 0x95, 0xAA, 0x5C, 0xE1, 0xF2,
            0x9E, 0xDE, 0x0A, 0x73, 0x78, 0x39, 0xEF, 0x8A,
            0x42, 0xED, 0x3B, 0x2F, 0xB8, 0xE9, 0xC1, 0xE6,
            0x72, 0x19, 0xDF, 0x5E, 0xD7, 0xD1, 0x32, 0xBC,
            0xA7, 0x7D, 0xFA, 
        };
        return item_b(lookup[this->val]);
    }
}

dla::item_b operator"" _b (unsigned long long n)
{
    return dla::item_b(n);
}